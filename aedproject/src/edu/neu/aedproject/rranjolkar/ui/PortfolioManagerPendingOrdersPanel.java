/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.aedproject.rranjolkar.ui;

import edu.neu.aedproject.rranjolkar.AuditItem;
import edu.neu.aedproject.rranjolkar.UserAccount;
import edu.neu.aedproject.rranjolkar.WorkQueue;
import edu.neu.aedproject.rranjolkar.WorkRequest;
import edu.neu.aedproject.rranjolkar.services.LoginService;
import edu.neu.aedproject.rranjolkar.trading.ClientAccount;
import edu.neu.aedproject.rranjolkar.trading.Security;
import edu.neu.aedproject.rranjolkar.trading.TradingNetwork;
import edu.neu.aedproject.rranjolkar.trading.TradingOrganization;
import edu.neu.aedproject.rranjolkar.trading.TradingWorkRequest;
import edu.neu.aedproject.rranjolkar.trading.util.CommonUtils;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rutika Ranjolkar
 */
public class PortfolioManagerPendingOrdersPanel extends javax.swing.JPanel {

    /**
     * Creates new form PortfolioManagerClientsPanel
     */
    public PortfolioManagerPendingOrdersPanel() {
        initComponents();

        populatePendingOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnsBuySell = new javax.swing.ButtonGroup();
        txtOrderSearch = new javax.swing.JTextField();
        btnSearchClients = new javax.swing.JButton();
        btnResetClients = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPendingOrders = new javax.swing.JTable();
        btnResend = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnSearchClients.setText("Search");
        btnSearchClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchClientsActionPerformed(evt);
            }
        });

        btnResetClients.setText("Reset");
        btnResetClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetClientsActionPerformed(evt);
            }
        });

        tblPendingOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Submitted At", "Order Status", "Trader", "Last Note"
            }
        ));
        jScrollPane1.setViewportView(tblPendingOrders);

        btnResend.setText("Resubmit");
        btnResend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResendActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchClients)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnResetClients))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnResend)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchClients)
                    .addComponent(btnResetClients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResend)
                    .addComponent(btnCancel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchClientsActionPerformed
        populatePendingOrders();
    }//GEN-LAST:event_btnSearchClientsActionPerformed

    private void btnResetClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetClientsActionPerformed
        txtOrderSearch.setText("");
        populatePendingOrders();
    }//GEN-LAST:event_btnResetClientsActionPerformed

    private void btnResendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResendActionPerformed
        TradingWorkRequest request = CommonUtils.getSelection(tblPendingOrders, 0);
        if (request == null) {
            CommonUtils.showMessage("Please select an order");
        } else {
            String status = request.getStatus();
            boolean isReturned = WorkRequest.WORK_STATUS_RETURNED.equals(status);
            if (!isReturned) {
                CommonUtils.showMessage("Only a returned order can be resent");
            } else {
                String reason = JOptionPane.showInputDialog("Enter comments");
                request.resubmit(reason);
                populatePendingOrders();
                LoginService.getInstance().getCurrentAccount().getAuditTrail().add(
                        new AuditItem(new Date(), "Reubmitted order: " + request + " for reason: " + reason)
                );
            }
        }
    }//GEN-LAST:event_btnResendActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        TradingWorkRequest request = CommonUtils.getSelection(tblPendingOrders, 0);
        if (request == null) {
            CommonUtils.showMessage("Please select an order");
        } else {
            String status = request.getStatus();
            boolean isResolved = WorkRequest.WORK_STATUS_RESOLVED.equals(status);
            boolean isPlaced = TradingWorkRequest.WORK_STATUS_PLACED.equals(status);
            boolean isWIP = TradingWorkRequest.WORK_STATUS_WIP.equals(status);
            if (isResolved || isPlaced || isWIP) {
                CommonUtils.showMessage("Cannot cancel an order that is resolved/WIP");
            } else {
                String reason = JOptionPane.showInputDialog("Enter comments");
                request.cancel(reason);
                populatePendingOrders();
                LoginService.getInstance().getCurrentAccount().getAuditTrail().add(
                        new AuditItem(new Date(), "Cancelled order: " + request + " for reason: " + reason)
                );
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnResend;
    private javax.swing.JButton btnResetClients;
    private javax.swing.JButton btnSearchClients;
    private javax.swing.ButtonGroup btnsBuySell;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPendingOrders;
    private javax.swing.JTextField txtOrderSearch;
    // End of variables declaration//GEN-END:variables

    private void populatePendingOrders() {
        DefaultTableModel model = (DefaultTableModel) tblPendingOrders.getModel();
        model.setRowCount(0);
        String searchTerm = txtOrderSearch.getText().trim().toUpperCase();
        TradingOrganization tradingOrganization = (TradingOrganization) LoginService.getInstance().getCurrentOrganization();
        UserAccount manager = LoginService.getInstance().getCurrentAccount();
        List<TradingWorkRequest> requests = tradingOrganization.getTradingWorkRequestsForPortfolioManager(manager);
        if (CommonUtils.isNotEmpty(requests)) {
            for (TradingWorkRequest request : requests) {
                if (request.getMessage().toUpperCase().contains(searchTerm)) {
                    Object[] row = new Object[]{
                        request,
                        request.getStatus(),
                        request.getReceiver() == null ? "" : request.getReceiver().getEmployee().getName(),
                        request.lastNote()
                    };
                    model.addRow(row);
                }
            }
        }
    }

}
