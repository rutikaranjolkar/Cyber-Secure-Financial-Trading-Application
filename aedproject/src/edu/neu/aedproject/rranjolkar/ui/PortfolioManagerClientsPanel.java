/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.aedproject.rranjolkar.ui;

import edu.neu.aedproject.rranjolkar.AuditItem;
import edu.neu.aedproject.rranjolkar.services.LoginService;
import edu.neu.aedproject.rranjolkar.trading.ClientAccount;
import edu.neu.aedproject.rranjolkar.trading.Security;
import edu.neu.aedproject.rranjolkar.trading.TradingNetwork;
import edu.neu.aedproject.rranjolkar.trading.TradingOrganization;
import edu.neu.aedproject.rranjolkar.trading.TradingWorkRequest;
import edu.neu.aedproject.rranjolkar.trading.util.CommonUtils;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rutika Ranjolkar
 */
public class PortfolioManagerClientsPanel extends javax.swing.JPanel {

    /**
     * Creates new form PortfolioManagerClientsPanel
     */
    public PortfolioManagerClientsPanel() {
        initComponents();

        populateClientsTable();

        populateSecuritiesTable();

        rdoBuy.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnsBuySell = new javax.swing.ButtonGroup();
        txtClientName = new javax.swing.JTextField();
        btnSearchClients = new javax.swing.JButton();
        btnResetClients = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClients = new javax.swing.JTable();
        txtSecurityName = new javax.swing.JTextField();
        btnSearchSecurities = new javax.swing.JButton();
        btnResetSecurities = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSecurities = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        rdoBuy = new javax.swing.JRadioButton();
        rdoSell = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPriceLimit = new javax.swing.JTextField();
        btnSubmitTradeOrder = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnSearchClients.setText("Search");
        btnSearchClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchClientsActionPerformed(evt);
            }
        });

        btnResetClients.setText("Reset");
        btnResetClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetClientsActionPerformed(evt);
            }
        });

        tblClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Portfolio Value", "Security Holdings"
            }
        ));
        jScrollPane1.setViewportView(tblClients);

        btnSearchSecurities.setText("Search");
        btnSearchSecurities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSecuritiesActionPerformed(evt);
            }
        });

        btnResetSecurities.setText("Reset");
        btnResetSecurities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSecuritiesActionPerformed(evt);
            }
        });

        tblSecurities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Symbol", "Name"
            }
        ));
        jScrollPane2.setViewportView(tblSecurities);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Create a new Trade Order");

        rdoBuy.setBackground(new java.awt.Color(255, 255, 255));
        btnsBuySell.add(rdoBuy);
        rdoBuy.setText("Buy");

        rdoSell.setBackground(new java.awt.Color(255, 255, 255));
        btnsBuySell.add(rdoSell);
        rdoSell.setText("Sell");

        jLabel1.setText("Quantity:");

        jLabel2.setText("Price Limit:");

        btnSubmitTradeOrder.setText("Submit Trade Order");
        btnSubmitTradeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitTradeOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchClients)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnResetClients))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSecurityName, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchSecurities)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnResetSecurities))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdoBuy)
                        .addGap(18, 18, 18)
                        .addComponent(rdoSell))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPriceLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSubmitTradeOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchClients)
                            .addComponent(btnResetClients))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoBuy)
                            .addComponent(rdoSell))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPriceLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSecurityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchSecurities)
                            .addComponent(btnResetSecurities)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btnSubmitTradeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchClientsActionPerformed
        populateClientsTable();
    }//GEN-LAST:event_btnSearchClientsActionPerformed

    private void btnResetClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetClientsActionPerformed
        txtClientName.setText("");
        populateClientsTable();

        rdoBuy.setSelected(true);
    }//GEN-LAST:event_btnResetClientsActionPerformed

    private void btnSearchSecuritiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSecuritiesActionPerformed
        populateSecuritiesTable();
    }//GEN-LAST:event_btnSearchSecuritiesActionPerformed

    private void btnResetSecuritiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSecuritiesActionPerformed
        txtSecurityName.setText("");
        populateSecuritiesTable();
    }//GEN-LAST:event_btnResetSecuritiesActionPerformed

    private void btnSubmitTradeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitTradeOrderActionPerformed
        TradingOrganization tradingOrganization = (TradingOrganization) LoginService.getInstance().getCurrentOrganization();
        ClientAccount account = CommonUtils.getSelection(tblClients, 0);
        Security security = CommonUtils.getSelection(tblSecurities, 0);
        if (account == null) {
            CommonUtils.showMessage("Please select an account");
        } else if (security == null) {
            CommonUtils.showMessage("Please select a security");
        } else if (!CommonUtils.isDouble(txtQty.getText().trim())) {
            CommonUtils.showMessage("Please enter a valid quantity");
        } else if (!CommonUtils.isDouble(txtPriceLimit.getText().trim())) {
            CommonUtils.showMessage("Please enter a valid price limit");
        } else {
            double quantity = Double.parseDouble(txtQty.getText().trim());
            double priceLimit = Double.parseDouble(txtPriceLimit.getText().trim());
            String side = rdoBuy.isSelected() ? Security.SIDE_BUY : Security.SIDE_SELL;
            TradingWorkRequest req = tradingOrganization.submitTradingWorkRequest(account, security, quantity, priceLimit, side);
            CommonUtils.showMessage("Submitted order successfully!");
            LoginService.getInstance().getCurrentAccount().getAuditTrail().add(
                    new AuditItem(new Date(), "Submitted order: " + req)
            );
        }
    }//GEN-LAST:event_btnSubmitTradeOrderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnResetClients;
    private javax.swing.JButton btnResetSecurities;
    private javax.swing.JButton btnSearchClients;
    private javax.swing.JButton btnSearchSecurities;
    private javax.swing.JButton btnSubmitTradeOrder;
    private javax.swing.ButtonGroup btnsBuySell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdoBuy;
    private javax.swing.JRadioButton rdoSell;
    private javax.swing.JTable tblClients;
    private javax.swing.JTable tblSecurities;
    private javax.swing.JTextField txtClientName;
    private javax.swing.JTextField txtPriceLimit;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSecurityName;
    // End of variables declaration//GEN-END:variables

    private void populateClientsTable() {
        DefaultTableModel model = (DefaultTableModel) tblClients.getModel();
        model.setRowCount(0);
        TradingOrganization tradingOrganization = (TradingOrganization) LoginService.getInstance().getCurrentOrganization();
        List<ClientAccount> portfolios = tradingOrganization.findPortfolios(LoginService.getInstance().getCurrentAccount());
        if (portfolios != null && !portfolios.isEmpty()) {
            for (ClientAccount account : portfolios) {
                if (account.getName().toUpperCase().contains(txtClientName.getText().trim().toUpperCase())) {
                    Object[] row = new Object[]{account, tradingOrganization.findCashHoldingValue(account), tradingOrganization.findInvestedValue(account)};
                    model.addRow(row);
                }
            }
        }
    }

    private void populateSecuritiesTable() {
        DefaultTableModel model = (DefaultTableModel) tblSecurities.getModel();
        model.setRowCount(0);
        TradingNetwork tradingNetwork = (TradingNetwork) LoginService.getInstance().getCurrentNetwork();
        List<Security> securities = tradingNetwork.getSecurityDirectory().getSecurities();
        if (securities != null && !securities.isEmpty()) {
            for (Security security : securities) {
                if (security.getName().toUpperCase().contains(txtSecurityName.getText().trim().toUpperCase())) {
                    Object[] row = new Object[]{security, security.getSymbol()};
                    model.addRow(row);
                }
            }
        }
    }

}
