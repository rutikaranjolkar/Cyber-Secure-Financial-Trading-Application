/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.aedproject.rranjolkar.ui;

import edu.neu.aedproject.rranjolkar.Ecosystem;
import edu.neu.aedproject.rranjolkar.Enterprise;
import edu.neu.aedproject.rranjolkar.Network;
import edu.neu.aedproject.rranjolkar.trading.Broker;
import edu.neu.aedproject.rranjolkar.trading.IOIWorkRequest;
import edu.neu.aedproject.rranjolkar.trading.TradingOrganization;
import edu.neu.aedproject.rranjolkar.trading.util.CommonUtils;
import edu.neu.aedproject.rranjolkar.trading.util.EcosystemBuilder;
import java.util.ArrayList;
import java.util.Date;

/**
 *
 * @author Rutika Ranjolkar
 */
public class SysadminSingleIOIPanel extends javax.swing.JPanel {

    /**
     * Creates new form PortfolioManagerClientsPanel
     */
    public SysadminSingleIOIPanel() {
        initComponents();

        populateObjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnsBuySell = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtIOIContent = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        cmbBrokers = new javax.swing.JComboBox<>();
        btnSpam = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Add an IOI");

        jLabel2.setText("Broker:");

        txtIOIContent.setColumns(20);
        txtIOIContent.setRows(5);
        jScrollPane1.setViewportView(txtIOIContent);

        btnSubmit.setText("Submit Single");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        cmbBrokers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSpam.setText("Generate Spam");
        btnSpam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpamActionPerformed(evt);
            }
        });

        btnClear.setText("Clear all IOIs");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBrokers, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261)
                        .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSpam, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbBrokers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnSpam))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        String ioiText = txtIOIContent.getText();
        addSingleIOI(ioiText);
        CommonUtils.showMessage("Submitted IOI successfully");
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnSpamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpamActionPerformed
        for (int i = 0; i < 5; i++) {
            addSingleIOI("Spam #" + i + " " + txtIOIContent.getText());
        }
        CommonUtils.showMessage("Generated Spam IOIs successfully!");
    }//GEN-LAST:event_btnSpamActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        Ecosystem ecosystem = GenericJFrame.getInstance().getEcosystem();
        for (Network network : ecosystem.getNetworkDirectory().getNetworks()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises()) {
                TradingOrganization tradingOrganization = enterprise.getOrganization(TradingOrganization.class);
                if (tradingOrganization != null) {
                    tradingOrganization.getWorkQueue().setWorkRequests(new ArrayList<>());
                }
            }
        }
        CommonUtils.showMessage("Cleared IOIs successfully!");
    }//GEN-LAST:event_btnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSpam;
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup btnsBuySell;
    private javax.swing.JComboBox<String> cmbBrokers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtIOIContent;
    // End of variables declaration//GEN-END:variables

    private void populateObjects() {
        CommonUtils.clear(cmbBrokers);
        CommonUtils.populate(cmbBrokers, EcosystemBuilder.BROKERS);
    }

    private void addSingleIOI(String ioiText) {
        Ecosystem ecosystem = GenericJFrame.getInstance().getEcosystem();
        for (Network network : ecosystem.getNetworkDirectory().getNetworks()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises()) {
                TradingOrganization tradingOrganization = enterprise.getOrganization(TradingOrganization.class);
                if (tradingOrganization != null) {
                    IOIWorkRequest ioi = new IOIWorkRequest();
                    ioi.setBroker((Broker) CommonUtils.getSelection(cmbBrokers));
                    ioi.setMessage(ioiText);
                    ioi.setSubmittedAt(new Date());
                    tradingOrganization.getWorkQueue().getWorkRequests().add(ioi);
                }
            }
        }

    }

}
